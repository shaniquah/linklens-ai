AWSTemplateFormatVersion: '2010-09-09'
Description: 'LinkLens AI - AWS Infrastructure for LinkedIn Automation Agent'

Parameters:
  ProjectName:
    Type: String
    Default: linklens-ai
    Description: Name of the project
  
  Environment:
    Type: String
    Default: production
    AllowedValues: [development, staging, production]
    Description: Environment name

Resources:
  # S3 Bucket for storing content and analytics data
  ContentStorageBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${ProjectName}-content-storage-${Environment}'
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  # IAM Role for Lambda functions
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-lambda-execution-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: BedrockAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - bedrock:InvokeModel
                  - bedrock:InvokeModelWithResponseStream
                Resource: '*'
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                Resource: !Sub '${ContentStorageBucket}/*'

  # Lambda function for content processing
  ContentProcessorFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-content-processor'
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
      MemorySize: 512
      Environment:
        Variables:
          BEDROCK_REGION: !Ref AWS::Region
          S3_BUCKET: !Ref ContentStorageBucket
      Code:
        ZipFile: |
          const AWS = require('aws-sdk');
          const bedrock = new AWS.BedrockRuntime({ region: process.env.BEDROCK_REGION });
          
          exports.handler = async (event) => {
              try {
                  const { postType, tone, theme, voice, diction } = event;
                  
                  const prompt = `Generate a ${postType} LinkedIn post with tone: ${tone}, theme: ${theme}, voice: ${voice}, diction: ${diction}. Include hashtags and keep it professional.`;
                  
                  const params = {
                      modelId: 'amazon.nova-lite-v1:0',
                      contentType: 'application/json',
                      accept: 'application/json',
                      body: JSON.stringify({
                          inputText: prompt,
                          textGenerationConfig: {
                              maxTokenCount: 500,
                              temperature: 0.7,
                              topP: 0.9
                          }
                      })
                  };
                  
                  const response = await bedrock.invokeModel(params).promise();
                  const result = JSON.parse(response.body.toString());
                  
                  return {
                      statusCode: 200,
                      body: JSON.stringify({
                          content: result.results[0].outputText,
                          timestamp: new Date().toISOString()
                      })
                  };
              } catch (error) {
                  return {
                      statusCode: 500,
                      body: JSON.stringify({ error: error.message })
                  };
              }
          };

  # API Gateway for Lambda functions
  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub '${ProjectName}-api'
      Description: API for LinkLens AI Agent
      EndpointConfiguration:
        Types:
          - REGIONAL

  # API Gateway Resource
  ContentResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: content

  # API Gateway Method
  ContentMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ContentResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ContentProcessorFunction.Arn}/invocations'

  # Lambda permission for API Gateway
  LambdaApiGatewayPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ContentProcessorFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub '${ApiGateway}/*/POST/content'

  # API Gateway Deployment
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: ContentMethod
    Properties:
      RestApiId: !Ref ApiGateway
      StageName: !Ref Environment

Outputs:
  ApiEndpoint:
    Description: API Gateway endpoint URL
    Value: !Sub 'https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Environment}'
    Export:
      Name: !Sub '${ProjectName}-api-endpoint'

  S3BucketName:
    Description: S3 bucket for content storage
    Value: !Ref ContentStorageBucket
    Export:
      Name: !Sub '${ProjectName}-s3-bucket'

  LambdaFunctionArn:
    Description: Content processor Lambda function ARN
    Value: !GetAtt ContentProcessorFunction.Arn
    Export:
      Name: !Sub '${ProjectName}-lambda-arn'